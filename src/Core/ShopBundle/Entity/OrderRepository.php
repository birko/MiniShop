<?php

namespace Core\ShopBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrderRepository extends EntityRepository
{
    public function getOrdersByIdQueryBuilder($orderIds)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $expr = $queryBuilder->expr()->in('o.id', $orderIds);
        $query = $queryBuilder->select('o')
                ->from('CoreShopBundle:Order', 'o')
                ->leftJoin("o.items", 'oi')
                ->leftJoin("o.shipping", 's')
                ->leftJoin("o.shipping_status", 'ss')
                ->leftJoin("o.order_status", 'os')
                ->leftJoin("o.payment", 'p')
                ->leftJoin("o.delivery_state", 'ds')
                ->leftJoin("o.invoice_state", 'is')
                ->andWhere($expr);
        return $queryBuilder ;
    }
    
    public function getOrdersByIdQuery($orderIds)
    {
        return  $this->getOrdersByIdQueryBuilder($orderIds)->getQuery();
    }
    
    public function updateOrderStatus($orderIds, $statusId)
    {
        if(!empty($orderIds))
        {
            $queryBuilder = $this->getEntityManager()->createQueryBuilder();
            $expr = $queryBuilder->expr()->in('o.id', $orderIds);
            $queryBuilder
                ->update('CoreShopBundle:Order', 'o')
                ->set("o.order_status", ":order_status")
                ->andWhere($expr)
                ->setParameter('order_status', $statusId)
                ;
            $numUpdated = $queryBuilder->getQuery()->execute(); 
            return $numUpdated;
        }
        return 0;
    }
    
    public function updateShippingStatus($orderIds, $statusId)
    {
        if(!empty($orderIds))
        {
            $queryBuilder = $this->getEntityManager()->createQueryBuilder();
            $expr = $queryBuilder->expr()->in('o.id', $orderIds);
            $queryBuilder
                ->update('CoreShopBundle:Order', 'o')
                ->set("o.shipping_status", ":shipping_status")
                ->andWhere($expr)
                ->setParameter('shipping_status', $statusId)
                ;
            $numUpdated = $queryBuilder->getQuery()->execute(); 
            return $numUpdated;
        }
        return 0;
    }
}